package gen

import (
	"bytes"
	"encoding/base64"
	"go/format"
	html "html/template"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"
)

type GenParameters struct {
	// Package declaration for generated file
	Package string
	// Variable name for generated template map. Defaults to "templates".
	VarName string
	// File to generate
	FileName string
	// Template dir to embed
	TemplateDir string
}

func Generate(g GenParameters) error {
	files, err := ioutil.ReadDir(g.TemplateDir)
	if err != nil {
		return err
	}
	templates := map[string]string{}
	for _, file := range files {
		if file.IsDir() {
			continue
		}
		contents, err := ioutil.ReadFile(filepath.Join(g.TemplateDir, file.Name()))
		if err != nil {
			return err
		}
		_, err = html.New(file.Name()).Parse(string(contents))
		if err != nil {
			return err
		}
		templates[file.Name()] = base64.StdEncoding.EncodeToString(contents)
	}
	genContent, err := render(g, templates)
	if err != nil {
		return err
	}
	f, err := os.Create(g.FileName)
	if err != nil {
		return err
	}
	_, err = f.WriteString(genContent)
	if err != nil {
		return err
	}
	return f.Close()
}

func render(p GenParameters, templates map[string]string) (string, error) {
	ctx := struct {
		P GenParameters
		D map[string]string
	}{p, templates}
	buf := &bytes.Buffer{}
	err := fileTemplate.Execute(buf, ctx)
	if err != nil {
		return "", err
	}
	output, err := format.Source(buf.Bytes())
	if err != nil {
		return "", err
	}
	return string(output), nil
}

const targetFile = `package {{.P.Package}}

// Generated by templeGen. DO NOT EDIT!
var {{.P.VarName}} = map[string]string{
	{{ range $key, $value := .D }}"{{$key}}": "{{$value}}",
{{ end }}
}
`

var fileTemplate *template.Template

func init() {
	var err error
	fileTemplate, err = template.New("outputFile").Parse(targetFile)
	if err != nil {
		panic(err.Error())
	}
}
